{"id":"Waveform.js","dependencies":[{"name":"/Users/tatecarson/webDev/vibration-music/granular/package.json","includedInParent":true,"mtime":1586051670864},{"name":"p5","loc":{"line":1,"column":15},"parent":"/Users/tatecarson/webDev/vibration-music/granular/src/Waveform.js","resolved":"/Users/tatecarson/webDev/vibration-music/granular/node_modules/p5/lib/p5.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _p = _interopRequireDefault(require(\"p5\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst BAR_WIDTH = 4,\n      GAP = 2;\n\nclass DrawWaveform {\n  constructor() {\n    const self = this;\n    let step, amp;\n    this.drawn = false;\n\n    function s(sketch) {\n      sketch.setup = function () {\n        const canvas = sketch.createCanvas(sketch.windowWidth, sketch.windowHeight);\n        canvas.parent('canvases');\n      };\n\n      sketch.draw = function () {\n        if (self.drawn || !self.buffer) {\n          return;\n        }\n\n        sketch.clear();\n        step = Math.ceil(self.buffer.length / sketch.width);\n        amp = sketch.height / 2 - sketch.height / 20;\n        sketch.strokeWeight(2);\n        sketch.strokeCap(sketch.ROUND);\n        sketch.fill('#FFF');\n        sketch.noStroke();\n        let lastAmp = null;\n\n        for (let i = 0; i < sketch.width; i++) {\n          let min = 1;\n          let max = -1; // average amp\n\n          for (let j = 0; j < step; j++) {\n            const datum = self.buffer[i * step + j];\n\n            if (datum < min) {\n              min = datum;\n            } else if (datum > max) {\n              max = datum;\n            }\n          }\n\n          let newAmp = (1 + min) * amp + sketch.height / 20;\n          lastAmp = (1 + min) * amp + sketch.height / 20;\n\n          if (Math.max(1, (max - min) * amp) > 2) {\n            if (i % (BAR_WIDTH + GAP) === 0) {\n              sketch.rect(i, newAmp, BAR_WIDTH, Math.max(1, (max - min) * amp), 8);\n            }\n          }\n        }\n\n        self.drawn = true;\n      };\n\n      sketch.windowResized = function () {\n        sketch.resizeCanvas(sketch.windowWidth, sketch.windowHeight);\n        self.drawn = false;\n      };\n    }\n\n    new _p.default(s);\n  }\n\n  draw(buffer) {\n    this.buffer = buffer.getChannelData(0);\n    this.drawn = false;\n  }\n\n}\n\nexports.default = DrawWaveform;"},"sourceMaps":null,"error":null,"hash":"36b35b2ab161cfec72dd813a34b567d7","cacheData":{"env":{}}}