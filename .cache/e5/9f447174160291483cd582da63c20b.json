{"id":"Grains.js","dependencies":[{"name":"/Users/tatecarson/webDev/vibration-music/granular/package.json","includedInParent":true,"mtime":1586051670864},{"name":"p5","loc":{"line":1,"column":15},"parent":"/Users/tatecarson/webDev/vibration-music/granular/src/Grains.js","resolved":"/Users/tatecarson/webDev/vibration-music/granular/node_modules/p5/lib/p5.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _p = _interopRequireDefault(require(\"p5\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst ID = 'grains';\n\nclass Grains {\n  constructor(granular) {\n    let grains = [];\n\n    const s = sketch => {\n      sketch.setup = function () {\n        const canvas = sketch.createCanvas(sketch.windowWidth, sketch.windowHeight);\n        canvas.parent('canvases');\n        sketch.rectMode(sketch.CENTER);\n        sketch.ellipseMode(sketch.CENTER);\n        sketch.fill('#FFF');\n        sketch.stroke('blue');\n        sketch.strokeWeight(2);\n        sketch.noCursor();\n        granular.on('grainCreated', grain => {\n          const {\n            position\n          } = grain;\n          const x = map(position, 0, 1, 0, sketch.width);\n          grain = {\n            x,\n            y: sketch.height / 2\n          };\n          grains.push(grain);\n          setTimeout(() => {\n            grains = grains.filter(g => g !== grain);\n          }, 200);\n        });\n      };\n\n      sketch.draw = function () {\n        sketch.clear();\n        grains.forEach(grain => {\n          const {\n            x,\n            y\n          } = grain;\n          grain.x += 2;\n          sketch.rect(x, y, 48, 16, 8);\n        });\n        sketch.ellipse(sketch.mouseX, sketch.mouseY, 16, 16);\n      };\n\n      sketch.mousePressed = function () {\n        granular.startVoice({\n          id: ID,\n          position: map(sketch.mouseX, 0, sketch.width, 0, 1),\n          volume: 0.5\n        });\n      };\n\n      sketch.mouseDragged = function () {\n        granular.updateVoice(ID, {\n          position: map(sketch.mouseX, 0, sketch.width, 0, 1),\n          volume: 0.5\n        });\n      };\n\n      sketch.mouseReleased = function () {\n        granular.stopVoice(ID);\n      };\n\n      sketch.windowResized = function () {\n        sketch.resizeCanvas(sketch.windowWidth, sketch.windowHeight);\n      };\n    };\n\n    new _p.default(s);\n  }\n\n}\n\nexports.default = Grains;\n\nfunction map(value, inMin, inMax, outMin, outMax) {\n  return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n}"},"sourceMaps":null,"error":null,"hash":"ad515e55ed853233ac69e74d0b89a471","cacheData":{"env":{}}}