{"id":"DragAndDrop.js","dependencies":[{"name":"/Users/tatecarson/webDev/vibration-music/granular/package.json","includedInParent":true,"mtime":1586051670864},{"name":"granular-js/src/Events","loc":{"line":1,"column":19},"parent":"/Users/tatecarson/webDev/vibration-music/granular/src/DragAndDrop.js","resolved":"/Users/tatecarson/webDev/vibration-music/granular/node_modules/granular-js/src/Events.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Events = _interopRequireDefault(require(\"granular-js/src/Events\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass DragAndDrop {\n  constructor(element) {\n    const events = this.events = new _Events.default();\n    const hint = document.getElementById('pill-drop');\n    element.addEventListener('drop', e => {\n      e.preventDefault();\n      hint.classList.add('hidden');\n      const dataTransfer = e.dataTransfer;\n\n      if (dataTransfer.items) {\n        events.fire('drop');\n\n        for (let i = 0; i < dataTransfer.items.length; i++) {\n          if (dataTransfer.items[i].kind == 'file') {\n            events.fire('readFile');\n            const file = dataTransfer.items[i].getAsFile();\n            const reader = new FileReader();\n\n            reader.onload = e => {\n              const buffer = reader.result;\n              events.fire('fileRead', {\n                data: buffer\n              });\n            };\n\n            reader.addEventListener('progress', event => {\n              if (event.lengthComputable) {\n                const percentComplete = Math.round(event.loaded / event.total * 100);\n                events.fire('readFileProgress', {\n                  progress: percentComplete\n                });\n              } else {\n                console.log('length not computable');\n              }\n            });\n            reader.readAsArrayBuffer(file);\n          }\n        }\n      } else {\n        console.log('no items found');\n      }\n    });\n    element.addEventListener('dragover', e => {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'copy';\n      hint.classList.remove('hidden');\n      events.fire('dragOver');\n    });\n    element.addEventListener('dragend', e => {\n      const dataTransfer = e.dataTransfer;\n      hint.classList.add('hidden');\n\n      if (dataTransfer.items) {\n        for (let i = 0; i < dataTransfer.items.length; i++) {\n          dataTransfer.items.remove(i);\n        }\n      } else {\n        e.dataTransfer.clearData();\n      }\n    });\n  }\n\n  on(event, callback) {\n    this.events.on(event, callback);\n  }\n\n}\n\nexports.default = DragAndDrop;"},"sourceMaps":null,"error":null,"hash":"03c96bc54a2785ba2e8bebd7b65b1a12","cacheData":{"env":{}}}