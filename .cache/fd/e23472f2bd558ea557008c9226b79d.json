{"id":"node_modules/rhythmical/lib/Fractions.js","dependencies":[{"name":"/Users/tatecarson/webDev/vibration-music/granular/package.json","includedInParent":true,"mtime":1585839294072},{"name":"/Users/tatecarson/webDev/vibration-music/granular/node_modules/rhythmical/package.json","includedInParent":true,"mtime":1585579120469}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fractions = void 0;\n\nclass Fractions {\n  static add(a, b, cancel = true) {\n    const lcm = Fractions.lcm(a[1], b[1]);\n    [a, b] = [a, b].map(f => Fractions.setDivisor(f, lcm));\n    const sum = [a[0] + b[0], lcm];\n\n    if (cancel) {\n      return Fractions.cancel(sum);\n    }\n\n    return sum;\n  }\n\n  static cancel(a) {\n    return Fractions.setDivisor(a, a[1] / Fractions.gcd(a[0], a[1]));\n  }\n\n  static setDivisor(a, divisor) {\n    return [a[0] * divisor / a[1], divisor];\n  }\n\n  static lcm(x, y) {\n    return !x || !y ? 0 : Math.abs(x * y / Fractions.gcd(x, y));\n  }\n\n  static gcd(x, y) {\n    x = Math.abs(x);\n    y = Math.abs(y);\n\n    while (y) {\n      var t = y;\n      y = x % y;\n      x = t;\n    }\n\n    return x;\n  }\n\n}\n\nexports.Fractions = Fractions;","map":null},"hash":"9b2a2f1ed4703b71014310eb21707f8d","cacheData":{"env":{}}}