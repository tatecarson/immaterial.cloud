{"id":"index.js","dependencies":[{"name":"/Users/tatecarson/webDev/vibration-music/granular/package.json","includedInParent":true,"mtime":1585839294072},{"name":"granular-js","loc":{"line":1,"column":21},"parent":"/Users/tatecarson/webDev/vibration-music/granular/index.js","resolved":"/Users/tatecarson/webDev/vibration-music/granular/node_modules/granular-js/index.js"},{"name":"rhythmical","loc":{"line":2,"column":23},"parent":"/Users/tatecarson/webDev/vibration-music/granular/index.js","resolved":"/Users/tatecarson/webDev/vibration-music/granular/node_modules/rhythmical/lib/index.js"},{"name":"tone","loc":{"line":3,"column":17},"parent":"/Users/tatecarson/webDev/vibration-music/granular/index.js","resolved":"/Users/tatecarson/webDev/vibration-music/granular/node_modules/tone/build/Tone.js"},{"name":"startaudiocontext","loc":{"line":4,"column":30},"parent":"/Users/tatecarson/webDev/vibration-music/granular/index.js","resolved":"/Users/tatecarson/webDev/vibration-music/granular/node_modules/startaudiocontext/StartAudioContext.js"}],"generated":{"js":"\"use strict\";\n\nvar _granularJs = _interopRequireDefault(require(\"granular-js\"));\n\nvar _rhythmical = require(\"rhythmical\");\n\nvar _tone = _interopRequireDefault(require(\"tone\"));\n\nvar _startaudiocontext = _interopRequireDefault(require(\"startaudiocontext\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import p5 from 'p5'\n// import 'p5/lib/addons/p5.sound'\nasync function getData(url) {\n  return new Promise(resolve => {\n    const request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = function () {\n      const audioData = request.response;\n      resolve(audioData);\n    };\n\n    request.send();\n  });\n}\n\nasync function init() {\n  // Tone.Transport.start()\n  // otherData = await getData('bowedWav.wav')\n  // TODO: add some total-serialism\n  const afrobell4 = [1, [0, 0.2], 0.1, [0, 1]];\n  const afrobell3 = [3, [4, 3], 5, [1, 4]]; // class playNotes {\n  //   constructor (notes, cycle) {\n  //     this.notes = notes\n  //     this.cycle = cycle\n  //     // this.data = data\n  //   }\n  //   makeGrain () {\n  //     this.grain = new Granular({\n  //       audioContext,\n  //       envelope: {\n  //         attack: 0.2,\n  //         release: 0.5\n  //       },\n  //       density: 0.7,\n  //       spread: 0.6,\n  //       pitch: 1\n  //     })\n  //     this.grain.on('settingBuffer', () => console.log('setting buffer'))\n  //     this.grain.on('bufferSet', () => console.log('buffer set'))\n  //     this.grain.on('grainCreated', () => console.log('grain created'))\n  //     return this.grain\n  //   }\n  //   setGrain (data) {\n  //     this.grain.setBuffer(data)\n  //   }\n  //   makePart (grain) {\n  //     this.events = Rhythm.render(this.notes, this.cycle)\n  //     return new Tone.Part(\n  //       {\n  //         callback: (time, event) => {\n  //           // console.log(event)\n  //           grain.set({\n  //             pitch: event.value\n  //           })\n  //         },\n  //         events: this.events,\n  //         loop: true,\n  //         loopEnd: this.cycle\n  //       }).start()\n  //   }\n  // }\n  // const instrument = new playNotes(afrobell4, 2, '')\n  // const grain = instrument.makeGrain()\n  // await instrument.setGrain(data)\n  // instrument.makePart(grain)\n  // FIXME: not working on mobile, what the fuck\n  // not loading the buffer\n  // but the granular-js demo works on mobile\n  // WHATTTT\n  // is it a localhost problem?\n  // FIXME: its an issue with the audio context\n  // try the raw context? \n  // get the same context as p5 is giving\n  // const audioContext = p5.prototype.getAudioContext()\n\n  const audioContext = new _tone.default.Context().rawContext; // const audioContext = Tone.context\n  // const audioContext = new Tone().context._context\n  // console.log(audioContext, new Tone().context._context, new Tone.Context().rawContext)\n\n  (0, _startaudiocontext.default)(audioContext, '#button').then(function () {//started\n  });\n  const granular = new _granularJs.default({\n    audioContext,\n    envelope: {\n      attack: 0,\n      decay: 0.5\n    },\n    density: 0.9,\n    spread: 0.1,\n    pitch: 1\n  });\n  granular.on('settingBuffer', () => console.log('setting buffer'));\n  granular.on('bufferSet', () => console.log('buffer set'));\n  granular.on('grainCreated', () => console.log('grain created'));\n  const data = await getData('example.wav');\n  await granular.setBuffer(data);\n  const resume = document.getElementById('resume');\n  resume.addEventListener('click', () => {\n    _tone.default.context.resume();\n\n    const id = granular.startVoice({\n      position: 0.1,\n      gain: 0.5\n    });\n    let pitch = 1;\n    const interval = setInterval(() => {\n      pitch -= 0.05;\n      granular.set({\n        pitch\n      });\n    }, 200);\n    setTimeout(() => {\n      clearInterval(interval);\n      granular.stopVoice(id);\n      granular.set({\n        pitch: 1\n      });\n    }, 2000);\n  });\n}\n\ninit();","map":null},"hash":"b4370c7d8d7726e3d669ba9c6c423f9a","cacheData":{"env":{}}}